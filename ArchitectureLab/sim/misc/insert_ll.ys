# Musa Furkan Zenbilci e2469203

        .pos 0
init:
        irmovq stack, %rsp
        pushq %r10
        pushq %r9
        irmovq $0, %r9
        irmovq $8, %r10
        call Main
        subq %r10, %rsp
        rmmovq %r9, (%rsp)
        addq %r10, %rsp
        halt
.pos 0x200
ele0:
        .quad 0x0005
        .quad ele1
ele1:
        .quad 0x000c
        .quad ele2
ele2:
        .quad 0x0010
        .quad ele3
ele3:
        .quad 0x001a
        .quad ele4
ele4:
        .quad 0x0030
        .quad ele5
ele5:
        .quad 0x0045
        .quad ele6
ele6:
        .quad 0x005e
        .quad 0 # Remember that 0 is null.
        
.pos 0x400
array:
    .quad 0
    .quad 0


insert_ll:
        rrmovq %rdi, %rax
        rmmovq %rdx, (%rsi)
        irmovq $1, %r14
        rrmovq %rdi, %r13
        andq %r13, %r13
        je cond
        mrmovq (%rdi), %r13
        subq %rdx, %r13
        jle L22
L18:
        rmmovq    %rax, 8(%rsi)
        rrmovq    %rsi, %rax
        ret

cond:
        rmmovq    %rax, 8(%rsi)
        rrmovq    %rsi, %rax
        ret

L22:
        rrmovq    %rdi, %rcx
L19:
        rrmovq    %rcx, %rdi
        mrmovq    8(%rcx), %rcx
        rrmovq %rcx, %r13
        andq %r13, %r13
        je      L21
        mrmovq (%rcx), %r13
        subq %rdx, %r13
        jl      L19
L21:
        rmmovq    %rcx, 8(%rsi)
        rmmovq    %rsi, 8(%rdi)
        ret


Main:
        irmovq ele0, %rdi
        irmovq array, %rsi
        irmovq $56, %rdx
        call insert_ll
        subq %r10, %rsp
        rmmovq %r9, (%rsp)
        addq %r10, %rsp
        ret

        .pos 0x800
stack:

