# Musa Furkan Zenbilci e2469203

        .pos 0
init:
        irmovq stack, %rsp
        pushq %r10
        pushq %r9
        irmovq $0, %r9
        irmovq $8, %r10
        call Main
        subq %r10, %rsp
        rmmovq %r9, (%rsp)
        addq %r10, %rsp
        halt
        
        .pos 0x200
root:
.quad 17
.quad node6
.quad node24
node6:
.quad 6
.quad node4
.quad node11
node4:
.quad 4
.quad node3
.quad node5
node3:
.quad 3
.quad 0
.quad 0
node5:
.quad 5
.quad 0 # Remember that 0 is null.
.quad 0
node11:
.quad 11
.quad node8
.quad 0
node8:
.quad 8
.quad 0
.quad 0
node24:
.quad 24
.quad node19
.quad node40
node19:
.quad 19
.quad 0
.quad 0
node40:
.quad 40
.quad 0
.quad node52
node52:
.quad 52
.quad 0
.quad 0
k:
.quad 8




kth_bst:
        #pushq %r11 #for rbx check
        #pushq %r12 #For stack constant 8
        #pushq %r13 #For rdi check
        #pushq %r14 #For constant 1
        irmovq $1, %r14
        rrmovq %rdi, %r13
        andq %r13, %r13
        je cond
        pushq %rbp
        pushq %rbx
        irmovq $8, %r12
        subq %r12, %rsp
        rrmovq %rdi, %rbp
        rrmovq %rsi, %rbx
        mrmovq 8(%rdi), %rdi
        call kth_bst
        rrmovq %rbx, %r11
        andq %r11, %r11
        je L9   
        mrmovq (%rbx), %r13
        subq %r14, %r13
        rmmovq %r13, (%rbx)
        jne L11
        andq %r13, %r13
        jne L9
        mrmovq 0(%rbp), %rax
L9:
        addq %r12, %rsp
        popq %rbx
        popq %rbp
        ret

L11:
        mrmovq 16(%rbp), %rdi
        rrmovq %rbx, %rsi
        call kth_bst
        jmp L9

cond:
        mrmovq (%rbx), %r8
        irmovq $0, %r13
        addq %r8, %r13
        jl rett
        irmovq $-1, %rax
rett:
        ret

Main:
        irmovq root, %rax
        rrmovq %rax, %rdi
        irmovq k, %rsi
        #mrmovq (%rsi), %rsi
        call kth_bst
        subq %r10, %rsp
        rmmovq %r9, (%rsp)
        addq %r10, %rsp
        ret

        .pos 0x600
stack:

